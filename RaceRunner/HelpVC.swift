//
//  HelpVC.swift
//  RaceRunner
//
//  Created by Josh Adams on 3/1/15.
//  Copyright (c) 2015 Josh Adams. All rights reserved.
//

import UIKit

class HelpVC: ChildVC {
  @IBOutlet var viewControllerTitle: UILabel!
  @IBOutlet var textPicker: UISegmentedControl!
  @IBOutlet var helpView: UITextView!

  private static let helpArray = ["\nDescriptions of RaceRunner's screens follow.\n\n^Start Run^\n\nThe purpose of this screen is to allow you to record runs.\n\nTap Start Run to start recording a run.\n\nThe first time you record a run, iOS will ask whether RaceRunner can access the GPS sensor on your iPhone. Answer yes if you would like RaceRunner to record your run.\n\nTap Start when you are ready to start. RaceRunner will begin recording your run.\n\nAs you run, RaceRunner colors your route based on your altitude. But on the top-right corner of the screen, there is a button labeled \"A P\". Tap the P to have RaceRunner color your route based on pace. Tap the A to have RaceRunner color your route based on altitude.\n\nTap Pause to pause recording of your run.\n\nTap Stop to end recording of your run. RaceRunner will show you the details of your run.\n\nTo return to the main menu during a run or on any other screen, tap the horizontal-bars icon in the top-left corner.\n\n^Run Details^\n\nThe purpose of this screen to is show details of a run.\n\nAs during a run, tap the A or P button in the top right-corner to have RaceRunner color the route based on altitude or pace, respectively.\n\nBy default, RaceRunner shows total calories expended during the run. Tap the N button near the bottom-right corner to see net calories.\n\nTap the pencil button near the bottom-right corner to name your run. The advantage of doing this is that if you run the same route again, RaceRunner will automatically associate the run with that name.\n\nTap the graph icon near the bottom-right corner to see graphs of pace and altitude for the run. Rotate your iPhone 90 degrees to switch the vertical and horizontal axes. Graphs look better in landscape mode!\n\nTap the arrow icon in the bottom-right corner to export your run to email.\n\nTap the Back button in the top-left corner to return to the Run screen.\n\n^Demo^\n\nThe purpose of this screen is to allow you to see RaceRunner's run-tracking functionality without moving your feet.\n\nTap Stop to end the demo.\n\n^Simulate^\n\nThe purpose of this screen is to allow you to choose a past run to replay. This is useful after a race for reviewing what happened during the race.\n\nWhen you tap a previous run, RaceRunner replays the run on the Run screen.\n\nTo delete a past run, swipe left on it and tap Delete.\n\nTap Stop to end the simulation.\n\nIf there are more runs than fit on one screen, the list of past runs scrolls.\n\n^History^\n\nThe purpose of this screen is to allow you to choose a past run to see details about.\n\nTap a previous run to see details about it.\n\nTo delete a past run, swipe left on it and tap Delete.\n\nIf there are more runs than fit on one screen, the list of past runs scrolls.\n\nFor instructions on how to export runs from other running apps and import them into RaceRunner, tap Import in the top-right corner.\n\n^Shoes^\n\nThe purpose of this screen is to allow you keep track of how many miles or kilometers each pair of running shoes has on it. This is important because running shoes lose their cushioning ability as you use them. After each run, RaceRunner adds the distance of the run to the mileage of the active pair of shoes, if any.\n\nTo add a pair of shoes to track, tap ​+​.\n\nTo edit or delete a pair of shoes, swipe left on it.\n\n^New Shoes^\n\nThe purpose of this screen is to allow you to describe a new pair of shoes for RaceRunner to track.\n\nTap the rectangle to the right of the Name label to name the pair.\n\nNew shoes default to current and maximum mileages of 0 and 400 miles, respectively. If these are incorrect for your shoes, tap the rectangles to the right of the Current or Maximum Mileage labels and input the correct mileage(s).\n\nYou may enjoy seeing a photo of your shoes in RaceRunner. RaceRunner's developer sure does. To see your shoes in RaceRunner, tap the shoe icon to select a photo from your camera roll. RaceRunner needs your permission for this.\n\nBy default, each pair of shoes you add becomes the current pair of shoes. If the new pair should not be the current pair, tap the checkmark.\n\nTap Done when finished inputting the pair of shoes.\n\n^Settings^\n\nThe purpose of this screen is to allow you to change RaceRunner's settings, altering its behavior. Descriptions of the settings follow.\n\n​Units:​ Allows you to choose whether RaceRunner uses metric or imperial units.\n\n​Broadcast Next Run:​ Allows you to broadcast your next run to spectators who have RaceRunner on their iPhones. Tapping this button causes the Broadcast screen, described below, to appear.\n\n​Speed Multiplier:​ Allows you to change the the speed at which the demo or simulations of past runs are played.\n\n​Stop:​ Allows you to automatically stop a run after a certain distance. This is useful, for example, if you are recording a 3.1-mile time trial. With this setting enabled, you don't need to tap Stop at the end of the time trial. Automatic stop applies to the next run only.\n\n​Animated Runner:​ Allows you to choose, as an avatar on the Run screen, an animated human or horse.\n\n​Weight:​ Allows you to tell RaceRunner your weight. RaceRunner records this weight after runs and uses it to calculate calories expended.\n\n​Hide / Show:​ Toggles whether to show your weight on the Run Details screen.\n\n​Splits:​ Allows you to tell RaceRunner how often to speak aloud your pace, distance, and elevation changes. To change the frequency of updates, tap Every 1 mile.\n\n​Audible Splits:​ Allows you to tell RaceRunner whether to speak aloud your progress.\n\n​Accent:​ Allows you to tell RaceRunner whether to speak aloud your progress with an American, Irish, English (Received Pronunciation), or Australian accent.\n\n^Broadcast^\n\nThe purpose of this screen is to allow you to specify a name to broadcast your run with and whether spectators can stop the run you broadcast.\n\n​Name:​ Spectators spectate your run by inputting this name on the Spectate screen. This name can be anything, but it must be globally unique. Your email address works well for this.\n\n​Allow Spectator Stop:​ Allows you to specify whether spectators can stop the run you are broadcasting. This feature is useful because runners are often ready to keel over after racing and are in no position to unlock an iPhone and tap a Stop button.\n\nTap Done after you select a name for your broadcast. RaceRunner will broadcast the next run you record. RaceRunner does not broadcast run simulations or the demo.\n\n^Spectate^\n\nThe purpose of this screen is to allow you to spectate a run that a runner is broadcasting with RaceRunner.\n\nTap Start to start spectating. Input the name that your runner is using to broadcast a run. Tap Start Spectating when done inputting.\n\nTap Message to send the runner you are spectating a message. The runner's copy of RaceRunner will speak aloud this message.\n\nTap Stop to stop spectating. If the broadcasting runner permits, you have the option of stopping the run.\n\n^Siri^\n\nRaceRunner supports four Siri commands. To use them, activate Siri and say one of the following phrases:\n\nstart workout in RaceRunner\npause workout in RaceRunner\nresume workout in RaceRunner\nstop workout in RaceRunner\n\nImportant: If you attempt to start a run via Siri without ever having started a run in RaceRunner and therefore given RaceRunner GPS access, starting the run in Siri will fail.", "^Credits^\n\nJosh Adams programmed RaceRunner and released it under the GNU Affero General Public License v3.0.\n\nRaceRunner started life as a Swift translation of an Objective-C tutorial by Matt Luedke.\n\nPhilip Mozolak created RaceRunner's icon.\n\nWilliam and Ryan Adams beta tested RaceRunner.\n\nKevin MacLeod composed the music in RaceRunner's app preview.\n\nSound Jay created RaceRunner's sound effects, except for the neighing sound in the minigame, which is by Orange Free Sounds.\n\nhttp://www.freepik.com created the checkbox and shoe icons and released them under the Creative Commons 3.0 license.\n\nhttp://www.flaticon.com/authors/simpleicon created the arrow icon and released it under the Creative Commons 3.0 license.\n\nOpen Weather created the weather API that RaceRunner uses.\n\nPubNub provided the publish/subscribe functionality that RaceRunner uses to broadcast runs. PubNub's license is reproduced below.\n\nKnut Inge Grøsland created COBezierTableView and released it under the MIT license. RaceRunner's menu screen uses code based on COBezierTableView.\n\nCharles Powell created MarqueeLabel and released it under the MIT license, but the repository does not apply that name to the license.\n\nRespective authors and creators hold the copyrights to all third-party libraries and services.\n\n^MIT License^\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n^GNU Affero General Public License v3.0^\n\nPermissions of this strongest copyleft license are conditioned on making available complete source code of licensed works and modifications, which include larger works using a licensed work, under the same license. Copyright and license notices must be preserved. Contributors provide an express grant of patent rights. When a modified version is used to provide a service over a network, the complete source code of the modified version must be made available.\n\n^Creative Commons License^\n\nThis license does not require that it be reproduced, but it does require a statement of whether the icons used pursuant to it were modified. The answer is no except for a color change. This license requires this link to itself: https://creativecommons.org/licenses/by/3.0/us/\n\n^PubNub License^\n\nPubNub Real-time Cloud-Hosted Push API and Push Notification Client Frameworks; Copyright (c) 2013 PubNub Inc.\nhttp://www.pubnub.com/\nhttp://www.pubnub.com/terms\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.", "Please email bug reports and feature requests for RaceRunner to vermontcoder@gmail.com.\n\nIf you find RaceRunner useful, please support it by leaving it a review in the App Store."]
  private static var attributedHelpArray = [NSAttributedString(), NSAttributedString(), NSAttributedString()]
  private static let animationDuration = 0.3

  override func viewDidLoad() {
    super.viewDidLoad()
    viewControllerTitle.attributedText = UIHelpers.letterPressedText(viewControllerTitle.text ?? "")
  }

  override func viewWillAppear(_ animated: Bool) {
    super.viewWillAppear(animated)
    AWSAnalyticsService.shared.recordVisitation(viewController: "\(HelpVC.self)")
    updateHelpText()
  }

  @IBAction func showMenu(_ sender: UIButton) {
    showMenu()
  }

  @IBAction func changeHelpText() {
    updateHelpText()
  }

  private func updateHelpText() {
    UIView.animate(withDuration: HelpVC.animationDuration, animations: {
      let index = self.textPicker.selectedSegmentIndex
      self.helpView.alpha = 0.0
      self.helpView.text = HelpVC.helpArray[index]
      self.helpView.textColor = UIConstants.lightColor
      self.helpView.alpha = 1.0
      self.helpView.font = UIFont(name: UIConstants.globalFont, size: UIConstants.bodyFontSize)
      if HelpVC.attributedHelpArray[index].length == 0 {
        self.helpView.attributedText = UIHelpers.styleText(self.helpView.text)
        HelpVC.attributedHelpArray[index] = self.helpView.attributedText
      } else {
         self.helpView.attributedText = HelpVC.attributedHelpArray[index]
      }
      self.helpView.scrollRangeToVisible(NSMakeRange(0, 0))
    })
  }
}
